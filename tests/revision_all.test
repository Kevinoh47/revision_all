<?php
// $Id$

/**
 * @file
 * Tests for Revision All module.
 */

/**
 * Defines a base class of
 */
class RevisionAllBase extends DrupalWebTestCase {
  /**
   * Implements setUp.
   * Creates a user with 'administer site configuration' permissions as well as
   * any other permissions passed in. Also enables all revision_all settings.
   *
   * @param array $permissions Additional permission to be granted to the user.
   */
  public function setUp($permissions = array()) {
    parent::setUp('revision_all', 'revision_all_test');

    $permissions[] = 'administer site configuration';

    $user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($user);

    $this->saveSettings($this->getSettings());
  }

  /**
   * Gets a basic settings array for storing revision_all settings.
   *
   * @param bool $revision_all The "Revision All" checkbox state.
   * @param bool $enable_future The "Enable for all Future Content Types"
   *             checkbox state.
   * @param bool $prevent_override The "Prevent Revisioning Overrides" checkbox
   *             state.
   * @return array A basic revision_all settings array.
   */
  public function getSettings($revision_all = TRUE, $enable_future = TRUE, $prevent_override = TRUE) {
    $settings = array();
    $settings['revision-all[revision-all]'] = $revision_all;
    $settings['revision-all[enable-future]'] = $enable_future;
    $settings['revision-all[prevent-override]'] = $prevent_override;

    return $settings;
  }

  /**
   * Submits the revision_all settings form with the supplied settings.
   *
   * @param array $settings The form settings to be POSTed.
   */
  public function saveSettings($settings = array()) {
    $this->drupalPost('admin/content/revision-all', $settings, 'Save configuration');
  }

  /**
   * Creates a custom content type called 'Custom Content/custom_content'.
   */
  public function createCustomContentType() {
    $settings = array(
      'name' => 'Custom Content',
      'type' => 'custom_content',
    );

    $this->drupalCreateContentType($settings);
  }

  /**
   * Returns the name of the test method making a call to a helper function.
   *
   * @return string The calling methods name.
   */
  public function getCallingMethodName() {
    $trace = debug_backtrace();
    return $trace[2]['function'];
  }
}


/**
 * Tests the basic Revision All settings.
 */
class RevisionAllBasicTests extends RevisionAllBase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Revision All Base',
      'description' => 'Tests to ensure the Revision All settings work correctly.',
      'group' => 'Revision All',
    );
  }

  /**
   * Tests that the revision_all settings form is available and properly
   * preconfigured.
   */
  function testSettingsAccessible() {
    $this->drupalGet('admin/content/revision-all');
    $this->assertResponse('200', 'Settings accessible');
    $this->assertTitle('Revision All | Drupal', 'Settings title is "Revision All"');

    $this->assertFieldChecked('edit-revision-all-revision-all', '"Revision All" Checked');
    $this->assertFieldChecked('edit-revision-all-enable-future', '"Enable for all Future Content Types" checked');
    $this->assertFieldChecked('edit-revision-all-prevent-override', '"Prevent Revisioning Overrides" unchecked');
  }

  /**
   * Tests that revision_all settings are properly saved in the database when
   * the form is submitted.
   */
  function testSettingsSaving() {
    $settings = parent::getSettings(FALSE, TRUE, FALSE);

    parent::saveSettings($settings);

    $this->assertText('Revisioning Set', '"Revisioning Set" message');

    $settings = array();
    $settings['revision-all'] = FALSE;
    $settings['enable-future'] = TRUE;
    $settings['prevent-override'] = FALSE;
    $db_settings = variable_get('revision_all', array());

    $this->assertEqual($settings, $db_settings, 'DB settings correct');
  }
}


/**
 * Tests the "Revision All" feature and revisioning of individual content types.
 */
class RevisionAllTypeRevisioningTests extends RevisionAllBase {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Type Revisioning Tests',
      'description' => 'Tests the"Revision All" feature and revisioning of individual content types.',
      'group' => 'Revision All',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp(array('administer nodes'));
  }

  /**
   * Checks the current virtual browser page to ensure that the "Create new
   * revision" checkbox is checked.
   *
   * @param  $type The type of content being edited. Used for reporting.
   */
  public function revisioningChecked($type) {
    $caller = parent::getCallingMethodName();

    //todo $type could be automatically pulled
    $this->assertFieldChecked('edit-revision', "$caller: $type revisioning set");
  }

  /**
   * Checks the current virtual browser page to ensure that the "Create new
   * revision" checkbox is not checked.
   *
   * @param  $type The type of content being edited. Used for reporting.
   */
  public function revisioningNotChecked($message) {
    $caller = parent::getCallingMethodName();

    //todo $type could be automatically pulled
    $this->assertNoFieldChecked('edit-revision', "$caller: $message - revisioning not set");
  }

  /**
   * Tests the built-in content type behavior when 'Revision All' is checked.
   */
  function testRevisionAllBase() {
    $this->drupalGet('node/add/page');

    $this->revisioningChecked('Page');

    $this->drupalGet('node/add/story');

    $this->revisioningChecked('Story');
  }

  /**
   * Tests custom content type behavior when 'Revision All' is checked.
   */
  function testRevisionAllCustomType() {
    parent::createCustomContentType();

    $this->drupalGet('node/add/custom-content');

    $this->revisioningChecked('Custom Content');
  }

  /**
   * Tests module-defined content type behavior when 'Revision All' is checked.
   */
  function testRevisionAllModuleType() {
    $this->drupalGet('node/add/revision-all-test');

    $this->revisioningChecked('Module Content');
  }

  /**
   * Tests the built-in content type behavior when only some content types are
   * selected.
   */
  function testRevisionSelectBaseType() {
    $settings = parent::getSettings(FALSE, TRUE, TRUE);
    $settings['revision-all[revision-types][Page]'] = FALSE;

    parent::saveSettings($settings);

    $this->drupalGet('node/add/page');

    $this->revisioningNotChecked('Page');

    $settings['revision-all[revision-types][Page]'] = TRUE;

    parent::saveSettings($settings);

    $this->drupalGet('node/add/page');

    $this->revisioningChecked('Page');
  }

  /**
   * Tests custom content type behavior when only some content types are
   * selected.
   */
  function testRevisionSelectCustomType() {
    parent::createCustomContentType();

    $settings = parent::getSettings(FALSE, TRUE, TRUE);
    parent::saveSettings($settings);

    $settings['revision-all[revision-types][Custom Content]'] = FALSE;
    parent::saveSettings($settings);

    parent::saveSettings($settings);

    $this->drupalGet('node/add/custom-content');

    $this->revisioningNotChecked('Custom Content');

    $settings['revision-all[revision-types][Custom Content]'] = TRUE;

    parent::saveSettings($settings);

    $this->drupalGet('node/add/custom-content');

    $this->revisioningChecked('Custom Content');
  }

  /**
   * Tests module-defined content type behavior when only some content types are 
   * selected.
   */
  function testRevisionSelectModuleType() {
    $settings = parent::getSettings(FALSE, TRUE, TRUE);
    $settings['revision-all[revision-types][revision_all_test page]'] = FALSE;

    parent::saveSettings($settings);

    $this->drupalGet('node/add/revision-all-test');

    $this->revisioningNotChecked('Test Content');

    $settings['revision-all[revision-types][revision_all_test page]'] = TRUE;

    parent::saveSettings($settings);

    $this->drupalGet('node/add/revision-all-test');

    $this->revisioningChecked('Test Content');
  }
}


/**
 * Tests the "Enable for all Future Content Types" feature.
 */
class RevisionAllEnableFutureTests extends RevisionAllBase {
  /**
   * Implements getInfo();
   */
  public static function getInfo() {
    return array(
      'name' => 'Future Types Tests',
      'description' => 'Tests the "Enable for all Future Content Types" feature.',
      'group' => 'Revision All',
    );
  }

  /**
   * Implements setUp();
   */
  public function setUp() {
    parent::setUp(array('administer content types'));
  }

  /**
   * Tests that "Create new revision" is automatically set for new content
   * types.
   */
  function testFutureContentType() {
    $this->drupalGet('admin/content/types/add');

    $this->assertFieldChecked('edit-node-options-revision', '"Create new revision" checked on new content type');
  }
}


/**
 * Tests the Prevent Revisioning Overrides feature.
 */
class RevisionAllPreventOverrideTests extends RevisionAllBase {
  /**
   * Implements getInfo();
   */
  public static function getInfo() {
    return array(
      'name' => 'Prevent Override Tests',
      'description' => 'Tests the "Prevent Revisioning Overrides" feature.',
      'group' => 'Revision All',
    );
  }

  /**
   * Implements setUp();
   */
  public function setUp() {
    parent::setUp(array('administer nodes'));
  }

  /**
   * Checks the current virtual browser page to ensure that the "Create new
   * revision" checkbox is disabled.
   */
  function has_disabled_revisions() {
    $caller = parent::getCallingMethodName();

    $this->assertRaw('<input type="checkbox" name="revision" id="edit-revision" value="1"  checked="checked"  disabled="disabled" class="form-checkbox" />', $caller . ': "Create new revision" disabled');
  }

  /**
   * Tests built-in content type "Create new revision" behavior.
   */
  function testPreventsOverrideBaseType() {
    $this->drupalGet('node/add/page');

    $this->has_disabled_revisions();
  }

  /**
   * Tests custom content type "Create new revision" behavior.
   */
  function testPreventsOverrideCustomType() {
    parent::createCustomContentType();

    $this->drupalGet('node/add/custom-content');

    $this->has_disabled_revisions();
  }

  /**
   * Tests module-defined content type "Create new revision" behavior.
   */
  function testPreventsOverrideModuleType() {
    $this->drupalGet('node/add/revision-all-test');

    $this->has_disabled_revisions();
  }
}